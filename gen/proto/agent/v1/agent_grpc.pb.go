// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: agent/v1/agent.proto

package agentV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributeServiceClient is the client API for DistributeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributeServiceClient interface {
	AgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error)
	AgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error)
}

type distributeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributeServiceClient(cc grpc.ClientConnInterface) DistributeServiceClient {
	return &distributeServiceClient{cc}
}

func (c *distributeServiceClient) AgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error) {
	out := new(AgentInfoResponse)
	err := c.cc.Invoke(ctx, "/agent.v1.DistributeService/AgentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeServiceClient) AgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error) {
	out := new(AgentStatusResponse)
	err := c.cc.Invoke(ctx, "/agent.v1.DistributeService/AgentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributeServiceServer is the server API for DistributeService service.
// All implementations must embed UnimplementedDistributeServiceServer
// for forward compatibility
type DistributeServiceServer interface {
	AgentInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error)
	AgentStatus(context.Context, *AgentStatusRequest) (*AgentStatusResponse, error)
	mustEmbedUnimplementedDistributeServiceServer()
}

// UnimplementedDistributeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributeServiceServer struct {
}

func (UnimplementedDistributeServiceServer) AgentInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentInfo not implemented")
}
func (UnimplementedDistributeServiceServer) AgentStatus(context.Context, *AgentStatusRequest) (*AgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentStatus not implemented")
}
func (UnimplementedDistributeServiceServer) mustEmbedUnimplementedDistributeServiceServer() {}

// UnsafeDistributeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributeServiceServer will
// result in compilation errors.
type UnsafeDistributeServiceServer interface {
	mustEmbedUnimplementedDistributeServiceServer()
}

func RegisterDistributeServiceServer(s grpc.ServiceRegistrar, srv DistributeServiceServer) {
	s.RegisterService(&DistributeService_ServiceDesc, srv)
}

func _DistributeService_AgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServiceServer).AgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.v1.DistributeService/AgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServiceServer).AgentInfo(ctx, req.(*AgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributeService_AgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServiceServer).AgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.v1.DistributeService/AgentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServiceServer).AgentStatus(ctx, req.(*AgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributeService_ServiceDesc is the grpc.ServiceDesc for DistributeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1.DistributeService",
	HandlerType: (*DistributeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentInfo",
			Handler:    _DistributeService_AgentInfo_Handler,
		},
		{
			MethodName: "AgentStatus",
			Handler:    _DistributeService_AgentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/v1/agent.proto",
}

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	Issue(ctx context.Context, opts ...grpc.CallOption) (TaskService_IssueClient, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Issue(ctx context.Context, opts ...grpc.CallOption) (TaskService_IssueClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[0], "/agent.v1.TaskService/Issue", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceIssueClient{stream}
	return x, nil
}

type TaskService_IssueClient interface {
	Send(*IssueRequest) error
	Recv() (*IssueResponse, error)
	grpc.ClientStream
}

type taskServiceIssueClient struct {
	grpc.ClientStream
}

func (x *taskServiceIssueClient) Send(m *IssueRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskServiceIssueClient) Recv() (*IssueResponse, error) {
	m := new(IssueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	Issue(TaskService_IssueServer) error
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) Issue(TaskService_IssueServer) error {
	return status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_Issue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).Issue(&taskServiceIssueServer{stream})
}

type TaskService_IssueServer interface {
	Send(*IssueResponse) error
	Recv() (*IssueRequest, error)
	grpc.ServerStream
}

type taskServiceIssueServer struct {
	grpc.ServerStream
}

func (x *taskServiceIssueServer) Send(m *IssueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskServiceIssueServer) Recv() (*IssueRequest, error) {
	m := new(IssueRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Issue",
			Handler:       _TaskService_Issue_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent/v1/agent.proto",
}
